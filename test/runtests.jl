using CodecBzip2
using Base.Test
import TranscodingStreams

@testset "Bzip2 Codec" begin
    codec = Bzip2Compression()
    @test codec isa Bzip2Compression
    @test ismatch(r"^CodecBzip2.Bzip2Compression\(blocksize100k=\d+, workfactor=\d+, verbosity=\d+\)$", sprint(show, codec))
    @test CodecBzip2.initialize(codec) === nothing
    @test CodecBzip2.finalize(codec) === nothing

    codec = Bzip2Decompression()
    @test codec isa Bzip2Decompression
    @test ismatch(r"^CodecBzip2.Bzip2Decompression\(small=(true|false), verbosity=\d+\)$", sprint(show, codec))
    @test CodecBzip2.initialize(codec) === nothing
    @test CodecBzip2.finalize(codec) === nothing

    # Generated by `bz2.compress(b"foo")` on CPython 3.5.2.
    data = b"BZh91AY&SYI\xfe\xc4\xa5\x00\x00\x00\x01\x00\x01\x00\xa0\x00!\x00\x82,]\xc9\x14\xe1BA'\xfb\x12\x94"
    @test read(Bzip2DecompressionStream(IOBuffer(data))) == b"foo"
    @test read(Bzip2DecompressionStream(IOBuffer(vcat(data, data)))) == b"foofoo"

    # concatenate two bzip2 blocks
    buf = IOBuffer()
    stream = Bzip2CompressionStream(buf)
    write(stream, b"foo", TranscodingStreams.TOKEN_END)
    write(stream, b"bar", TranscodingStreams.TOKEN_END)
    @test read(Bzip2DecompressionStream(IOBuffer(take!(buf)))) == b"foobar"

    @test Bzip2CompressionStream <: TranscodingStreams.TranscodingStream
    @test Bzip2DecompressionStream <: TranscodingStreams.TranscodingStream

    TranscodingStreams.test_roundtrip_read(Bzip2CompressionStream, Bzip2DecompressionStream)
    TranscodingStreams.test_roundtrip_write(Bzip2CompressionStream, Bzip2DecompressionStream)
    TranscodingStreams.test_roundtrip_lines(Bzip2CompressionStream, Bzip2DecompressionStream)
    TranscodingStreams.test_roundtrip_transcode(Bzip2Compression, Bzip2Decompression)

    @test_throws ArgumentError Bzip2Compression(blocksize100k=10)
    @test_throws ArgumentError Bzip2Compression(workfactor=251)
    @test_throws ArgumentError Bzip2Compression(verbosity=5)
    @test_throws ArgumentError Bzip2Decompression(verbosity=5)
end
